name: vmagent
base: core18
adopt-info: build
icon: logo.png
summary: vmagent is a tiny agent which helps you collect metrics from various sources
description: |
  * Can be used as a drop-in replacement for Prometheus for discovering and scraping targets such as node_exporter. Note that single-node VictoriaMetrics can also discover and scrape Prometheus-compatible targets in the same way as vmagent does.
  * Can add, remove and modify labels (aka tags) via Prometheus relabeling.
  * Can filter data before sending it to remote storage.
  * Can accept data via all the ingestion protocols supported by VictoriaMetrics.
  * Can aggregate incoming samples by time and by labels before sending them to remote storage.
  * Can replicate collected metrics simultaneously to multiple Prometheus-compatible remote storage systems.
  * Can save egress network bandwidth usage costs when VictoriaMetrics remote write protocol is used for sending the data to VictoriaMetrics.
  * Works smoothly in environments with unstable connections to remote storage. If the remote storage is unavailable, the collected metrics are buffered at `-remoteWrite.tmpDataPath`. The buffered metrics are sent to remote storage as soon as the connection to the remote storage is repaired. The maximum disk usage for the buffer can be limited with `-remoteWrite.maxDiskUsagePerURL`.
  * Uses lower amounts of RAM, CPU, disk IO and network bandwidth than Prometheus.
  * Scrape targets can be spread among multiple vmagent instances when big number of targets must be scraped.
  * Can load scrape configs from multiple files.
  * Can efficiently scrape targets that expose millions of time series such as `/federate` endpoint in Prometheus.
  * Can deal with high cardinality and high churn rate issues by limiting the number of unique time series at scrape time and before sending them to remote storage systems. 
  * Can write collected metrics to multiple tenants.
  * Supports metrics' scraping, ingestion and backfilling via the following protocols:
    *  Metrics from Prometheus exporters such as node_exporter.
    *  Prometheus remote write API
    *  InfluxDB line protocol over HTTP, TCP and UDP.
    *  Graphite plaintext protocol if `-graphiteListenAddr` is set.
    *  OpenTSDB put message, if `-opentsdbListenAddr` is set.
    *  HTTP OpenTSDB /api/put requests, if `-opentsdbHTTPListenAddr` is set.
    *  JSON line format.
    *  Native binary format.
    *  Prometheus exposition format.
    *  Arbitrary CSV data.
  * Supports metrics' relabeling. See https://docs.victoriametrics.com/#relabeling for details.
  * Ideally works with big amounts of time series data from Kubernetes, IoT sensors, connected cars, industrial telemetry, financial data and various Enterprise workloads.

  ** Configuration management**
  * Prometheus scrape config can be edited with your favorite editor, its located at:
    `vi /var/snap/vmagent/current//etc/vmagent-scrape-config.yaml`
    after changes, you can trigger config reread with `curl localhost:8429/-/reload`.
  * Configuration tuning is possible with editing extra_flags:
    `echo 'FLAGS="-yourFlagsHere' > /var/snap/vmagent/current/extra_flags && snap restart vmagent`
  * Data folder located at `/var/snap/victoriametrics/current/var/lib/vmagent-remotewrite-data/`.


grade: stable # must be 'stable' to release into candidate/stable channels
confinement: strict # use 'strict' once you have the right plugs and slots

parts:
  build:
    plugin: go
    go-channel: 1.21/stable
    go-importpath: github.com/VictoriaMetrics/VictoriaMetrics
    source: .
    source-type: local
    build-packages: [build-essential, make]
  # example-config:
  #   plugin: dump
  #   source: .
  #   organize:
  #     vmagent-scrape-config.yaml: vmagent-scrape-config.yaml
  #   prime:
  #     - vmagent-scrape-config.yaml
    override-build: |
      make app-local APP_NAME=vmagent
      mkdir -p $SNAPCRAFT_PART_INSTALL/bin
      cp -p $SNAPCRAFT_PART_BUILD/bin/vmagent $SNAPCRAFT_PART_INSTALL/bin/
      cp -p $SNAPCRAFT_PART_SRC/snap/local/vmagent-wrapper $SNAPCRAFT_PART_INSTALL/bin/
      cp -p $SNAPCRAFT_PART_SRC/snap/local/vmagent-scrape-config.yaml $SNAP_DATA/etc/vmagent-scrape-config.yaml
    override-pull: |
      snapcraftctl set-version "$PKG_TAG"
      snapcraftctl pull
apps:
  vmagent:
    command: bin/vmagent-wrapper
    daemon: simple
    restart-condition: always
    restart-delay: 10s
    plugs: [network,network-bind]

plugs:
  network:
  network-bind:

layout:
  /var/lib/vmagent:
    bind: $SNAP_DATA/var/lib/vmagent
  /etc/vmagent-scrape-config.yaml:
    bind-file: $SNAP_DATA/etc/vmagent-scrape-config.yaml
architectures:
  - build-on: ['arm64', 'amd64', 'ppc64el']
    run-on: ['arm64','amd64', 'ppc64el']